plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
def domaResources = ['doma.compile.config', 'META-INF/**/*.sql', 'META-INF/**/*.script']

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	domaGenRuntime
}

task copyDomaResourcesJava(type: Copy) {
    from sourceSets.main.resources.srcDirs
    println 'SQLファイルのコピー元'
    println sourceSets.main.resources.srcDirs
    into compileJava.destinationDir
    println 'SQLファイルのコピー先'
    println compileJava.destinationDir
    include domaResources
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompileOnly 'org.projectlombok:lombok'  // 追加
    testAnnotationProcessor 'org.projectlombok:lombok'  // 追加
    
    implementation "org.seasar.doma:doma-core:2.51.0"
    annotationProcessor "org.seasar.doma:doma-processor:2.51.0"
    
	implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.1.1'
	runtimeOnly 'mysql:mysql-connector-java'
}

sourceSets {
	main {
		output.resourcesDir = compileJava.destinationDir
	}
    test {
        compileClasspath += sourceSets.main.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

compileJava {
    dependsOn copyDomaResourcesJava
    dependsOn processResources
}

processResources {
    exclude domaResources
}

tasks.named('test') {
	useJUnitPlatform()
}

apply from: 'eclipse.gradle'