plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
ext.dependentVersion = '2.28.0'
sourceCompatibility = '17'

def domaResources = ['doma.compile.config', 'META-INF/**/*.sql', 'META-INF/**/*.script']

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	domaGenRuntime
}

task copyDomaResourcesJava(type: Copy) {
    from sourceSets.main.resources.srcDirs
    into compileJava.destinationDir
    include domaResources
}

repositories {
    mavenCentral()
}

dependencies {
	
	// lombok setting
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// doma-gen setting
	annotationProcessor 'org.seasar.doma:doma-processor:2.35.0'
	implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.4.0'
	implementation "org.seasar.doma:doma-gen:${dependentVersion}"
    domaGenRuntime 'org.seasar.doma:doma-gen:${dependentVersion}'
    domaGenRuntime 'mysql:mysql-connector-java:8.0.13'
    
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

sourceSets {
	main {
		output.resourcesDir = compileJava.destinationDir
	}
    test {
        compileClasspath += sourceSets.main.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

compileJava {
    dependsOn copyDomaResourcesJava
}

processResources {
    exclude domaResources
}

tasks.named('test') {
	useJUnitPlatform()
}

task gen {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties',
            classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: 'jdbc:mysql://localhost:3306/demo', user: 'hdpark', password: 'qkrgmlejr00!') {
            entityConfig()
            daoConfig()
            sqlConfig()
        }
    }
}

task genTestCases {
    group = 'doma-gen'
    doLast {
        ant.taskdef(resource: 'domagentask.properties',
            classpath: configurations.domaGenRuntime.asPath)
        ant.gen(url: 'jdbc:mysql://localhost:3306/demo', user: 'hdpark', password: 'qkrgmlejr00!') {
            sqlTestCaseConfig {
                fileset(dir: 'src/main/resources') {
                    include(name: 'META-INF/**/*.sql')
                }
            }
        }
    }
}

apply from: 'eclipse.gradle'